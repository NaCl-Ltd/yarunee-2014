= Summary of the Task

我々が見つけたエンジニアのノートによれば、彼らはプロジェクト中止前に動作するハードウェアとソフトウェアをなんとか手に入れたようだ。
不幸にもオリジナルのソフトウェアを復元できなかったが、我々はハードウェアの詳細な設計ノートを持っている。

今のところアーケード用ハードウェアのシミュレーションソフトを持っている。
あなたたちにやってほしいのは、アーケード用ハードウェアで動作するソフトウェアを書くことだ。

= Lightning Round Summary

lightning roundでは、ゴーストと対決する一人用のLambda-Manのいる"classic"バージョンをプレイする。

あなたたちに挑戦してほしいのはLambda-ManのAIを書くことだ。
それは審判から提供されるゴーストAIと、審判から提供される迷路内で対決する。

あなたたちはいくつかの迷路とゴーストAIのわずかな(賢くはない)アセンブリコードが提供される。

lightning roundは最初の24時間に開催される。12:00 UTC 26/07/2014までに提出すること。

= Full Round Summary

full roundはだいたいlightning roundと同じだが、ちょっと異なる。
詳細はlightning roundが終わったら公開される。
lightning roundが終わったらフロントページをチェックすること。

full roundは72時間いっぱい開催される。12:00 UTC 28/07/2014までに提出すること。

= The Lambda-Man game rules

== 目標

Lambda-Manは壁からなる2次元の迷路上にいて、追いかけてくるゴーストを避けながらできる限りのpillを食べなければならない。
Lambda-Manは3つのライフを持っていて、ゴーストがLambda-Manに追いつくとライフを失う。
ライフをすべて失うとゲームオーバー。
すべてのpillを食べるとLambda-Manはレベルクリアとなる。

pillに加えてLambda-Manはpower pillも食べる。
power pillを食べるとLambda-Manは短時間の間、ゴーストを食べられるようになる。

開始から特定の時間が経つと特定の場所に現れるフルーツを消える前に食べるとボーナス点が加算される。

次のシンボルが様々な要素を表現する。

<space>: なにもない
#: 壁
.: Pill
o: Power Pill
%: フルーツ
\: Lambda-Man	
=: ゴースト

= メカニクス

この世界は完全に決定的で、ターン制になっている。
それぞれのターンでは次のようになる。
1. すべてのLambda-Manとゴーストがスケジュールされたように動く。
   (Lambda-Manとゴーストはすべてのターンで動くわけではない)
2. いくつかのアクションがある
   (fright mode deactivating, フルーツの出現/消失)
3. Lambda-Manがpill/power pill/フルーツと同じマスにいるかチェックされる。
　1. pillのマスにいる場合、pillはLambda-Manに食べられて消える
  2. power pillのマスにいる場合、power pillはLambda-Manに食べられて消え、ゴーストを食べられるfright modeが直ちに始まる。
  3. フルーツのマスにいる場合、フルーツはLambda-Manに食べられて消える。

4. 1つ以上のゴーストがLambda-Manと同じマスにいる場合、fright modeならゴーストを食べ、fright modeでないならライフを失う。
5. すべてのpill(power pillは含まない)が食べられたらLambda-Manの勝ちでゲーム終了
6. ライフが0になったらLambda-Manの負けでゲーム終了
7. ターンカウンタがインクリメントされる

= Losing a life

fright modeではないターンの最後にLambda-Manとゴーストが同じマスにいるとライフを失う。
この場合、Lambda-Manとゴーストは直ちにスタート位置に戻り、その時の方向を向く。
(なので、次のターンの最初ではLambda-Manとゴーストは自身のスタート位置にいる)

= Power Pills

Power Pillを食べると、すべてのゴーストは前にいた方向に向きを変える。
fright modeの間、ゴーストがLambda-Manと同じマスにいるとLambda-Manに食べられる。
ゴーストは食べられると、スタート位置に戻り、スタート時の方向を向き、fright modeが終わるまで見えない。
見えない間はゴーストはLambda-Manを食べたり食べられたりできない。

fright mode中にpower pillを食べるとfright modeのターンカウントがリセットされる。

fright modeが終わるとすべてのゴーストはまた見えるようになる。

= Scoring

ゲームの目的は高いスコア(すべてのレベルで獲得したスコアの合計)を獲得することです。
スコアは次のように決まります。

pillを食べるごとに10ポイント
power pillを食べるごとに50ポイント
フルーツはそのフレーバーごとにポイントが変わります。
フルーツのフレーバーは次のようにレベルによって決定されます。

レベル　フレーバー　 ポイント
1       チェリー     100
2       ストロベリー 300
3       ピーチ       500
4       ピーチ       500
5       アップル     700
6       アップル     700
7       グレープ     1000
8       グレープ     1000
9       ギャラクシアン 2000
10      ギャラクシアン 2000
11      ベル         3000
12      ベル         3000
> 12    キー         5000

マップのレベルはそのエリアによって決まります。
与えられたマップのサイズ(mapWidth*mapHeight)によってレベルが次を満たすように決まります。

100 * (level - 1) < mapWidth * mapHeight <= 100 * level

例えば、マップサイズが15*18=270だとレベル3のマップです(200<270<=300)。

fright modeの間、ゴーストを食べると最初は200ポイントです。
別のpower pillを食べずに連続してゴーストを食べると1600を上限にポイントが2倍になっていきます。

Lambda-Manがすべてのpillを食べるとボーナスをもらえます。
ボーナスとしてスコアが(残りのライフ数+1)倍されます。
例えば、ライフが残り1だった場合、スコアが2倍されます。

== Ticks

Lambda-Manの世界はターン制です。
Ultimate Tick Clock(UTC)は現在のtick timeを与え、各ゲームの始まりでは1から数え始めます。
ゲームはEnd Of Livesという特定のUTCに達するまで(このときライフは0になります)続きます。

End Of Lives: 127 * mapWidth * mapHeight * 16

各レベルで二つのフルーツが特定のUTCで現れます。
二つ目のフルーツは一つ目が食べられる/食べられないに関わらず現れます。

フルーツ1の出現: 127 * 200(UTC)
フルーツ2の出現: 127 * 400(UTC)

それぞれのフルーツは食べられるか特定のUTCになるまで出現しています。

フルーツ1の消失: 127 * 280(UTC)
フルーツ2の消失: 127 * 480(UTC)

power pillをfright modeになります。
fright modeはpower pillを食べてから決められた期間だけ続きます。

fright modeの期間: 127 * 20

Lambda-Manとゴーストは異なる速さで移動します。
Lambda-Manは何かを食べるときはゆっくり移動し、ゴーストはfright modeの間はゆっくり移動します。
すべての移動は規則的で、移動に必要なターンは次のようになります。
例えば、Lambda-Manは最初127ターン目で動き、次は254ターン目です。

イベント        移動に必要なターン
Lambda-Man 	127
Lambda-Man (eating) 	137
Ghost AI 1 	130
Ghost AI 2 	132
Ghost AI 3 	134
Ghost AI 4 	136
Ghost AI 1 (fright) 	195
Ghost AI 2 (fright) 	198
Ghost AI 3 (fright) 	201
Ghost AI 4 (fright) 	204

== 移動

Lambda-Manは壁でない隣接したマスへ移動できます。
隣接したマスとは上、下、左、右のマスです。

Lambda-Manが不正な動きを選択した場合、動きが止まります。

ゴーストは壁でない隣接したマスへ移動します。
ゴーストは、四方が壁に囲まれてない限り動かなければなりません。
さらに、ゴーストは(その方向しかない限り)現在の方向と反対方向へは動けません。

その結果、ゴーストは合流点でしか向きを選ぶことしかできず、引き返すことはできません。
合流点とは少なくとも3方向の隣接したマスが壁ではないマスです。
例えば、次はすべて合流点です。

 # #     # #             # #     # # 
## ##    # ##   #####   ## #    ## ##
  =      #=       =       =#      =  
#####    # ##   ## ##   ## #    ## ##
         # #     # #     # #     # # 

ゴーストがカーブに着くと、カーブに沿って動きます。
ゴーストが行き止まりに着くと、引き返します。

ゴーストが合流点で不正な動きを選ぶと、可能なら前と同じ方向に動きつづけ、可能でないなら上、右、下、左の順で最初に移動可能な方向に行きます。

ゲームの始まりでは、すべてのLambda-Manとゴーストは下を向いています。

= Tournament scoring

lightning roundではあなたのLambda-Manと審判から提供されたゴーストが審判から提供されたマップで戦います。

あなたのlightning roundでのすべてのスコアは、一連のゲームでのスコアの合計点です。
実際に使われたマップやゴーストは明かされませんが、easyからhardまで変動します。
マッププロパティは後述します。

= Map properties

マップは長方形です。
マップのx,y座標は0から数えます。
左上の角が(0,0)で、x軸が右方向に伸びて、y座標が下方向に伸びます。

マップは迷路のようです。
マップは1マス分の廊下で構成されています。
形式的に表現すると、2x2の壁のないエリアは存在しません。

マップは端は壁で囲まれています。

すべてのpillは到達可能なマップ上に現れます。

マップごとにサイズやゴーストの数、power pillの数が変わります。
簡単なマップは小さくてゴーストも少なくpower pillもたくさん現れます。
難しいマップは大きく、たくさんゴーストがいてpower pillもなかなか現れません。
マップの最大サイズは256*256です。

= Lambda-Man CPU

我々はプロセッサのISA（バスアーキテクチャ）とアセンブリコードのいくつかのビットを含むLambda-Man AIチームによるプログラミング環境に関するいくつかのドキュメントを修復することができました。
我々もまたLambda-Man AIチームとLISP狂信者とLISPのフォームを知っている。しかし残念なことにLISPコードもそのコンパイラも見つけることができませんでした。

LamCoの"General Compute Coprocessor" (GCC)はどちらかといえば型にはまらなく-for its time-洗練されたCoprocessorです。
それはLISPコンパイラのために設計されたように見えます。
直交する命令セットというよりは、（我々が思うに）コンパイラにとって有用な、やや特別な命令の正しい数値を持っています。

We did however find a handwritten note by one of the engineers indicating that someone had written a compiler from a variant of Pascal, albeit with some limitations.

Fortunately we do have the original documentation of the processor which describes the instructions and operation in detail, though sadly not very much on how it was intended to be used by a compiler.

この節より下に我々のコメントに沿ってオリジナルドキュメントからの抜粋を含んでいます。

== General Architecture

マシンはスタックベースで、3つのスタックが異なる目的で使われます。
比較的大きなメモリを使用します。
メモリアクセスする方法はあまり普通ではありません。
メモリの中の生きているスタックとは別に、残りのメモリはガベージコレクトされたヒープとして使用され、GCはハードウェアによって実行されます。
このため、汎用的なメモリアクセス方法はありません。
メモリアクセスはスタックの中かGCされたヒープの中に限られます。

== CPU Registers

プログラマに見えるレジスタは4つあり、それらは特別な目的を持っています。

%c: コントロールレジスタ(プログラムカウンタ / インストラクションポインタ)
%s: データスタックレジスタ
%d: コントロールスタックレジスタ
%e: 環境フレームレジスタ

== Memory stacks

3つのレジスタがメモリ上の特別なデータ構造を指します。

* データスタック
* コントロールスタック
* 環境フレームチェイン

メモリの残りはデータヒープのためにとってあります。

== Control register and program code layout

データとコードのために、マシンは論理的に分けられたアドレス空間をもっています。
%cレジスタはインストラクションポインタで、次に実行されるべき命令を指しています。
プログラムは小さいアドレスから大きいアドレスに向かって並べられます。
インストラクションポインタ上のほとんどの命令の効果は、単にその値をインクリメントすることです。

== Data stack and register

データスタックは、計算の間の中間データを保存したり、関数呼び出しの値をreturnするのに使われます。
それは論理的に連続したスタックです。
%sレジスタはスタックのトップを指しています。
多くの命令はデータを単にスタックにpopしたりpushしたりするだけです。
例えば、ADD命令は2つの整数値をpopして合計をpushします。

== Control stack and register

コントロールスタックは関数呼び出しのreturn情報を保存するのに使われます。
リターンアドレスと環境フレームポインタです。
それは論理的に連続したスタックです。
複雑な制御フローの命令のみがコントロールスタックとレジスタに影響を与えます。詳細はSEL/JOINやAP/RAP/RTNを見てください。

== Environment frames and register

環境は関数のパラメータを含むローカル変数の格納に使われます。
データスタックの上に環境から値を読むための命令があります。
環境は、ローカル変数付きのローカルブロックや関数のような高級言語におけるネストされた変数スコープで使われるフレームのチェインから成ります。

環境は2つのスタック構造よりも複雑です。
contiguous stackというよりは、環境フレームのチェインから成ります。
各フレームはその親フレームへのポインタを含んでいます。
事実、フレームのチェインはスタックほど厳しくありません: フレームの生存期間は単純なLIFFOスタックの順番とは違います。
フレームはハードウェアGCによって管理されているためです。

各フレームは親フレームとゼロか多くのデータ値のポインタからなります。
%eレジスタはローカルフレームを差します。
一般に環境フレームのチェインの一連の要求として、マシンはローカルフレームまたはその親フレームのいずれかから値を読むための機能を持っています。

(We believe in the real hardware this feature was implemented in microcode, with internal registers to cache the outermost frame and a fixed number of the inner most frames for quick access).

== Data heap and data values

マシンは動的アロケーションとガベージコレクトされたデータヒープのサポートを持っています。
データヒープや環境フレームのデータはヒープへのポインタとなることができます。

データ値は3種類あります。整数とペアとクロージャです。
整数は符号付き32ビットの普通の方法で表現されます。
ペアとクロージャはデータヒープのオブジェクトへのポインタとして表現されます。
3種類のデータはtag bitによって見分けられます。
tag bitは(ATOM命令を除いて)ソフトウェアには見ることができませんが、ハードウェアがエラーチェックのために使用します。

ペアの操作は3つあります。ペアのアロケーションと、ペアの1つ目の要素へのアクセスと、2つ目の要素へのアクセスです。

プログラムデータ構造はペアと整数と(たまにクロージャ)のコンビネーションを使用して表現しなければなりません。

== Instruction reference

LDC - load constant

Synopsis: load an immediate literal;
          push it onto the data stack
Syntax:  LDC $n
Example: LDC 3
Effect:
  %s := PUSH(SET_TAG(TAG_INT,$n),%s)
  %c := %c+1


LD - load from environment

Synopsis: load a value from the environment;
          push it onto the data stack
Syntax:  LD $n $i
Example: LD 0 1
Effect:
  $fp := %e
  while $n > 0 do            ; follow chain of frames to get n'th frame
  begin
    $fp := FRAME_PARENT($fp)
    $n := $n-1
  end
  $v := FRAME_VALUE($fp, $i) ; i'th element of frame
  %s := PUSH($v,%s)          ; push onto the data stack
  %c := %c+1
Notes:
  Values within a frame are indexed from 0.


ADD - integer addition

Synopsis: pop two integers off the data stack;
          push their sum
Syntax: ADD
Effect:
  $y,%s := POP(%s)
  $x,%s := POP(%s)
  if TAG($x) != TAG_INT then FAULT(TAG_MISMATCH)
  if TAG($y) != TAG_INT then FAULT(TAG_MISMATCH)
  $z := $x + $y
  %s := PUSH(SET_TAG(TAG_INT,$z),%s)
  %c := %c+1


SUB - integer subtraction

Synopsis: pop two integers off the data stack;
          push the result of subtracting one from the other
Syntax: SUB
Effect:
  $y,%s := POP(%s)
  $x,%s := POP(%s)
  if TAG($x) != TAG_INT then FAULT(TAG_MISMATCH)
  if TAG($y) != TAG_INT then FAULT(TAG_MISMATCH)
  $z := $x - $y
  %s := PUSH(SET_TAG(TAG_INT,$z),%s)
  %c := %c+1


MUL - integer multiplication

Synopsis: pop two integers off the data stack;
          push their product
Syntax: MUL
Effect:
  $y,%s := POP(%s)
  $x,%s := POP(%s)
  if TAG($x) != TAG_INT then FAULT(TAG_MISMATCH)
  if TAG($y) != TAG_INT then FAULT(TAG_MISMATCH)
  $z := $x * $y
  %s := PUSH(SET_TAG(TAG_INT,$z),%s)
  %c := %c+1


DIV - integer division

Synopsis: pop two integers off the data stack;
          push the result of the integer division of one of the other
Syntax: DIV
Effect:
  $y,%s := POP(%s)
  $x,%s := POP(%s)
  if TAG($x) != TAG_INT then FAULT(TAG_MISMATCH)
  if TAG($y) != TAG_INT then FAULT(TAG_MISMATCH)
  $z := $x / $y
  %s := PUSH(SET_TAG(TAG_INT,$z),%s)
  %c := %c+1


CEQ - compare equal

Synopsis: pop two integers off the data stack;
          test if they are equal;
          push the result of the test
Syntax: CEQ
Effect:
  $y,%s := POP(%s)
  $x,%s := POP(%s)
  if TAG($x) != TAG_INT then FAULT(TAG_MISMATCH)
  if TAG($y) != TAG_INT then FAULT(TAG_MISMATCH)
  if $x == $y then
    $z := 1
  else
    $z := 0
  %s := PUSH(SET_TAG(TAG_INT,$z),%s)
  %c := %c+1


CGT - compare greater than

Synopsis: pop two integers off the data stack;
          test if the first is strictly greater than the second;
          push the result of the test
Syntax: CGT
Effect:
  $y,%s := POP(%s)
  $x,%s := POP(%s)
  if TAG($x) != TAG_INT then FAULT(TAG_MISMATCH)
  if TAG($y) != TAG_INT then FAULT(TAG_MISMATCH)
  if $x > $y then
    $z := 1
  else
    $z := 0
  %s := PUSH(SET_TAG(TAG_INT,$z),%s)
  %c := %c+1


CGTE - compare greater than or equal

Synopsis: pop two integers off the data stack;
          test if the first is greater than or equal to the second;
          push the result of the test
Syntax: CGTE
Effect:
  $y,%s := POP(%s)
  $x,%s := POP(%s)
  if TAG($x) != TAG_INT then FAULT(TAG_MISMATCH)
  if TAG($y) != TAG_INT then FAULT(TAG_MISMATCH)
  if $x >= $y then
    $z := 1
  else
    $z := 0
  %s := PUSH(SET_TAG(TAG_INT,$z),%s)
  %c := %c+1


ATOM - test if value is an integer

Synopsis: pop a value off the data stack;
          test the value tag to see if it is an int;
          push the result of the test
Syntax: ATOM
Effect:
  $x,%s := POP(%s)
  if TAG($x) == TAG_INT then
    $y := 1
  else
    $y := 0
  %s := PUSH(SET_TAG(TAG_INT,$y),%s)
  %c := %c+1


CONS - allocate a CONS cell

Synopsis: pop two values off the data stack;
          allocate a fresh CONS cell;
          fill it with the two values;
          push the pointer to the CONS cell
Syntax: CONS
Effect:
  $y,%s := POP(%s)
  $x,%s := POP(%s)
  $z := ALLOC_CONS($x,$y)
  %s := PUSH(SET_TAG(TAG_CONS,$z),%s)
  %c := %c+1


CAR - extract first element from CONS cell

Synopsis: pop a pointer to a CONS cell off the data stack;
          extract the first element of the CONS;
          push it onto the data stack
Syntax: CAR
Effect:
  $x,%s := POP(%s)
  if TAG($x) != TAG_CONS then FAULT(TAG_MISMATCH)
  $y := CAR($x)
  %s := PUSH($y,%s)
  %c := %c+1


CDR - extract second element from CONS cell

Synopsis: pop a pointer to a CONS cell off the data stack;
          extract the second element of the CONS;
          push it onto the data stack
Syntax: CDR
Effect:
  $x,%s := POP(%s)
  if TAG($x) != TAG_CONS then FAULT(TAG_MISMATCH)
  $y := CDR($x)
  %s := PUSH($y,%s)
  %c := %c+1


SEL - conditional branch

Synopsis: pop an integer off the data stack;
          test if it is non-zero;
          push the return address to the control stack;
          jump to the true address or to the false address
Syntax:  SEL $t $f
Example: SEL 335 346  ; absolute instruction addresses
Effect:
  $x,%s := POP(%s)
  if TAG($x) != TAG_INT then FAULT(TAG_MISMATCH)
  %d := PUSH(SET_TAG(TAG_JOIN,%c+1),%d)   ; save the return address
  if $x == 0 then
    %c := $f
  else
    %c := $t


JOIN - return from branch

Synopsis: pop a return address off the control stack, branch to that address
Syntax:  JOIN
Effect:
  $x,%d := POP(%d)
  if TAG($x) != TAG_JOIN then FAULT(CONTROL_MISMATCH)
  %c := $x


LDF - load function

Synopsis: allocate a fresh CLOSURE cell;
          fill it with the literal code address and the current
            environment frame pointer;
          push the pointer to the CLOSURE cell onto the data stack
Syntax:  LDF $f
Example: LDF 634      ; absolute instruction addresses
Effect:
  $x := ALLOC_CLOSURE($f,%e)
  %s := PUSH(SET_TAG(TAG_CLOSURE,$x),%s)
  %c := %c+1


AP - call function

Synopsis: pop a pointer to a CLOSURE cell off the data stack;
          allocate an environment frame of size $n;
          set the frame's parent to be the environment frame pointer
            from the CLOSURE cell;
          fill the frame's body with $n values from the data stack;
          save the stack pointer, environment pointer and return address
            to the control stack;
          set the current environment frame pointer to the new frame;
          jump to the code address from the CLOSURE cell;
Syntax:  AP $n
Example: AP 3      ; number of arguments to copy
Effect:
  $x,%s := POP(%s)            ; get and examine function closure
  if TAG($x) != TAG_CLOSURE then FAULT(TAG_MISMATCH)
  $f := CAR_CLOSURE($x)
  $e := CDR_CLOSURE($x)
  $fp := ALLOC_FRAME($n)      ; create a new frame for the call
  FRAME_PARENT($fp) := $e
  $i := $n-1
  while $i != -1 do           ; copy n values from the stack into the frame in reverse order
  begin
    $y,%s := POP(%s)
    FRAME_VALUE($fp,$i) := $y
    $i := $i-1
  end
  %d := PUSH(%e,%d)                     ; save frame pointer
  %d := PUSH(SET_TAG(TAG_RET,%c+1),%d)  ; save return address
  %e := $fp                             ; establish new environment
  %c := $f                              ; jump to function


RTN - return from function call

Synopsis: pop a stack pointer, return address and environment frame
            pointer off of the control stack;
          restore the stack and environment;
          jump to the return address
Syntax:  RTN
Effect:
  $x,%d := POP(%d)            ; pop return address
  if TAG($x) == TAG_STOP then MACHINE_STOP
  if TAG($x) != TAG_RET then FAULT(CONTROL_MISMATCH)
  $y,%d := POP(%d)            ; pop frame pointer
  %e := $y                    ; restore environment
  %c := $x                    ; jump to return address
Notes:
  Standard ABI convention is to leave the function return value on the
  top of the data stack. Multiple return values on the stack is possible,
  but not used in the standard ABI.

  The latest hardware revision optimizes the deallocation of the 
  environment frame. If the environment has not been captured by LDF
  (directly or indirectly) then it can be immediately deallocated.
  Otherwise it is left for GC.


DUM - create empty environment frame

Synopsis: Prepare an empty frame;
          push it onto the environment chain;
Syntax:  DUM $n
Example: DUM 3      ; size of frame to allocate
Effect:
  $fp := ALLOC_FRAME($n)       ; create a new empty frame of size $n
  FRAME_PARENT($fp) := %e      ; set its parent frame
  %e := SET_TAG(TAG_DUM,$fp)   ; set it as the new environment frame
  %c := %c+1
Notes:
  To be used with RAP to fill in the frame body.


RAP - recursive environment call function

Synopsis: pop a pointer to a CLOSURE cell off the data stack;
          the current environment frame pointer must point to an empty
            frame of size $n;
          fill the empty frame's body with $n values from the data stack;
          save the stack pointer, parent pointer of the current environment
             frame and return address to the control stack;
          set the current environment frame pointer to the environment
            frame pointer from the CLOSURE cell;
          jump to the code address from the CLOSURE cell;
Syntax:  RAP $n
Example: RAP 3      ; number of arguments to copy
Effect:
  $x,%s := POP(%s)            ; get and examine function closure
  if TAG($x) != TAG_CLOSURE then FAULT(TAG_MISMATCH)
  $f := CAR_CLOSURE($x)
  $fp := CDR_CLOSURE($x)
  if TAG($fp) != TAG_DUM then FAULT(FRAME_MISMATCH)
  if FRAME_SIZE($fp) != $n then FAULT(FRAME_MISMATCH)
  $i := $n-1
  while $i != -1 do           ; copy n values from the stack into the empty frame in reverse order
  begin
    $y,%s := POP(%s)
    FRAME_VALUE($fp,$i) := $y
    $i := $i-1
  end
  $fpp := FRAME_PARENT($fp)
  %d := PUSH($fpp,%d)                   ; save frame pointer
  %d := PUSH(SET_TAG(TAG_RET,%c+1),%d)  ; save return address
  %e := $fp                             ; establish new environment
  %c := $f                              ; jump to function


STOP - terminate co-processor execution

Synopsis: terminate co-processor execution and signal the main proessor.
Syntax:  STOP
Effect:
  MACHINE_STOP
Notes:
  This instruction is no longer part of the standard ABI. The standard ABI
  calling convention is to use a TAG_STOP control stack entry. See RTN.

== Examples

我々は彼らの高級言語によるいくつかのコードは見つけなかったとはいえ、命令リファレンスには一対のサンプルが含まれていました。

絶対命令アドレスのかわりにシンボリックラベルを持った文法を使っています。そのため、これらのプログラムは直接実行できません。

次のGCCプログラムはいくつかの命令を説明しています。

local.gcc

ローカル変数を作って使うための最小のサンプル

  LDC  21
  LDF  body     ; load body
  AP   1        ; call body with 1 variable in a new frame
  RTN
body:
  LD   0 0      ; var x
  LD   0 0      ; var x
  ADD
  RTN

goto.gcc

相互再帰の最小のサンプル。
この再帰では終了しない。
スタックを使ってout of memory errorで失敗する。

  DUM  2        ; 2 top-level declarations
  LDF  go       ; declare function go
  LDF  to       ; declare function to
  LDF  main     ; main function
  RAP  2        ; load declarations into environment and run main
  RTN           ; final return
main:
  LDC  1
  LD   0 0      ; var go
  AP   1        ; call go(1)
  RTN
to:
  LD   0 0      ; var n
  LDC  1
  SUB
  LD   1 0      ; var go
  AP   1        ; call go(n-1)
  RTN
go:
  LD   0 0      ; var n
  LDC  1
  ADD
  LD   1 1      ; var to
  AP   1        ; call to(n+1)
  RTN

== The processor/co-processor interface

基本的なプロセッサの説明に加えて、メインプロセッサとコプロセッサのインタフェースのドキュメントを見つけた。

<cite>
コプロセッサがオンになると、停止状態にあるヒープとスタックが空に初期化される。

primaryプロセッサは、コード、ヒープ、スタック、レジスターを初期化するためにプロセッサ/コプロセッサインタフェースを使用する。
</cite>

(我々は実際にはappendix 3.IIを持っていないが、幸運にもソフトウェアシミュレーションには不要である。)

<cite>
停止するとき、コプロセッサはprimaryプロセッサで割り込みを発生させる。
primaryプロセッサは、レジスタ、スタック、ヒープを調べるためにプロセッサ/コプロセッサインタフェースを使う。
それは停止した理由(停止、フォルト、トレース、ブレークポイント)を決定するため特別な状態レジスタを調査する。
</cite>

特にメインプロセッサは実行するためのセットアップをし、すべてのコプロセッサを制御可能にし、コプロセッサを実行する。
コプロセッサが停止すると、メインプロセッサはプログラムの結果の最後の状態を見ることができ、コプロセッサの状態は次の実行時に使用するため保存される。

<cite>
標準的なABIを使うとき、primaryプロセッサは、コントロールスタックでエントリをインストールすることによって最後の戻り値で実行停止がわかる。
</cite>

標準的な関数/手続き呼び出しはRTN命令を使う。
メインプロセッサがコプロセッサの関数を呼び出す限り、関数が停止したことを知る必要がある。
それは、コントロールスタックの"stop"エントリに置かれる。コプロセッサはリターンアドレスにジャンプする代わりにシンプルに停止する。

<cite>
標準的なABIでは、最初のエントリーポイントはアドレス0。
引数や戻り値は実装で定義される。
</cite>

これは慣習的な"main"関数がプログラムの先頭であることを表している。
main関数の引数や戻り値の方はアプリケーションに依存する。
我々は幸運にも、これらがLambda-Man AIのための説明をするドキュメントをもっている。


== Lambda-Man AI interface

LAMBDAMANは主に2つの引数を持った関数です。

 1. the initial state of the world, encoded as below
 2. undocumented

It returns a pair containing:

 1. the initial AI state
 2. the AI step function (closure)

The AI step function has two arguments:

 1. the current AI state
 2. the current state of the world, encoded as below

It returns a pair containing:

 1. the current AI state
 2. the current state of the world, encoded as below

It returns a pair containing:

 1. the current AI state
 2. the move, encoded as below

The encoding of the AI state is private. The host should pass the current
AI state on each step but not otherwise inspect it.

つまりこれは、AIはゲームの現在の状態を見てLambda-Manの移動方向を返す関数で実装することを我々に教えている。

（訳注: 自信ない）
AIは完全にステートレスである必要はありません。しかしながら、各ステップで使ったり更新したりできるprivate stateを使うことができます。
The AI does not have to be completely stateless however, it is able to make use of a private state that it can use and update on each step.

それは、返した新しい状態によって動きます。そしてホスト(game mechanics)は次のステップでのAI関数の状態を渡すことを期待しています。
初期AI状態は初期エントリポイント(the `main' function)から来ます。

少しばかり特殊なことがあります。それは、`main'は他の``well known''アドレスよりはむしろ、AI step functionを返します。
これは実は慣習です。`main'はよく知られたアドレスとホストがmainによって返されるべきと要求する他のエントリポイントを持っています。

（訳注: 自信ない）
関数を返すということは、コードアドレスを意味しませんが``CLOSURE cell''
Note that when it says that it returns a function it doesn’t mean a code address but a ``CLOSURE cell''.

それに関する我々の知っていることはLDFとAP命令を見てください。


世界の状態は次のようなエンコードがされています:

A 4-tuple consisting of

1. The map;
2. the status of Lambda-Man;
3. the status of all the ghosts;
4. the status of fruit at the fruit location.

マップは2Dグリッドで表現するリストのリスト(row-major)によってエンコードされています。
An enumeration represents the contents of each grid cell:

  * 0: Wall (`#`)
  * 1: Empty (`<space>`)
  * 2: Pill 
  * 3: Power pill
  * 4: Fruit location
  * 5: Lambda-Man starting position
  * 6: Ghost starting position


For example, this map

###
#..

is encoded as

[ [ 0, 0, 0 ]
, [ 0, 2, 2 ]
]

ここで留意すべきは、地図は全てのピルとパワーピルの現在の状態を反映することである。
地図はLambda-Manもゴーストもフルーツの存在も反映しない。
これらのアイテムは地図と分けて表示される。

The Lambda-Man status is a 5-tuple consisting of:
  1. Lambda-Man's vitality;
  2. Lambda-Man's current location, as an (x,y) pair;
  3. Lambda-Man's current direction;
  4. Lambda-Man's remaining number of lives;
  5. Lambda-Man's current score.

Lambda-Manのvitalityはactive power pillの消滅を示すカウントダウンです。
It is 0 when no power pill is active.
  * 0: standard mode;
  * n > 0: power pill mode: the number of game ticks remaining while the
           power pill will will be active

The status of all the ghosts is a list with the status for each ghost.
The list is in the order of the ghost number, so each ghost always appears
in the same location in the list.

The status for each ghost is a 3-tuple consisting of
  1. the ghost's vitality
  2. the ghost's current location, as an (x,y) pair
  3. the ghost's current direction

The Ghosts' vitality is an enumeration:
  * 0: standard;
  * 1: fright mode;
  * 2: invisible.

The Ghosts' and Lambda-Man's direction is an enumeration:
  * 0: up;
  * 1: right;
  * 2: down;
  * 3: left.

The status of the fruit is a number which is a countdown to the expiry of
the current fruit, if any.
  * 0: no fruit present;
  * n > 0: fruit present: the number of game ticks remaining while the
           fruit will will be present.

Lambda-Man's move is a direction as encoded above.
This document refers to tuples and lists, but of course the only primitive data structure is a CONS cell—a pair. Though it is not clearly specified anywhere, we believe it uses the following encoding for tuples and lists.

Tuples are encoded as right nested pairs, four example a 4-tuple:

(a,b,c,d)  is encoded as     (a, (b, (c, d)))
           which is really   CONS a (CONS b (CONS c d))
The encoding for a list is also right nested CONS cells, but slightly different in the base case. The empty list is encoded as the integer 0.

     []  encoded as                          0
    [c]  encoded as                   CONS c 0
  [b,c]  encoded as           CONS b (CONS c 0)
[a,b,c]  encoded as   CONS a (CONS b (CONS c 0))

== Example

== Resource constraints

== Errors
