; 壁にぶつかったら避けるシンプルなAI

; 現在位置を取得
(define (current_pos world) (car (cdr (car (cdr world)))))

; 現在方向を取得
(define (current_dir world) (car (cdr (cdr (car (cdr world))))))

; cons+cons=cons
(define (plus_cons c1 c2)
  (cons (+ (car c1) (car c2)) (+ (cdr c1) (cdr c2))))

; マップ上の指定されたマスの情報を取得するサンプル
(define (lsearch self y li) (if (= y 0) (car li) (self self (- y 1) (cdr li))))
(define (search y x map) (lsearch lsearch x (lsearch lsearch y map)))

; 指定した(x,y)の位置の数値を取得 map_pos（TODO: dummy）
(define (map_pos xy map) (search (cdr xy) (car xy) map))

; 指定した方向のスペースが空いているか？
(define (is_empty_pos world dir_cons)
  (if (> (map_pos (plus_cons (current_pos world) dir_cons) (car world)) 0)
    1 0))

; 方向を表す単位ベクトル
(define (direction dir)
  (if (= dir 0) (cons 0 -1)
    (if (= dir 1) (cons 1 0)
      (if (= dir 2) (cons 0 1) (cons -1 0)))))

; step関数
(define (step state world)
  ; 同じ方向に行けるか？
  (if (is_empty_pos world (direction (current_dir world)))
    (current_dir world)
    ; 右に行けるか？
    (if (is_empty_pos world (cons 1 0))
      (cons state 1)
      ; ダウン可能か？
      (if (is_empty_pos world (cons 0 1))
        (cons state 2)
        ; 左に行けるか？
        (if (is_empty_pos world (cons -1 0))
          (cons state 3)
          ; 上に行くしかない
          (cons state 0)))))
  )

; main
(cons 0 step)
