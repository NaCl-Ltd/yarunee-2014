; 壁にぶつかったら避けるシンプルなAI

(define initial_world (inline "LD 1 0"))
(define ghost_ais (inline "LD 1 1"))

; 現在位置を取得
(define (current_pos world) (car (cdr (car (cdr world)))))

; 現在方向を取得
(define (current_dir world) (car (cdr (cdr (car (cdr world))))))

; cons+cons=cons
(define (plus_cons c1 c2)
  (cons (+ (car c1) (car c2)) (+ (cdr c1) (cdr c2))))

; マップ上の指定されたマスの情報を取得するサンプル
(define (lsearch self y li) (if (= y 0) (car li) (self self (- y 1) (cdr li))))
(define (search y x map) (lsearch lsearch x (lsearch lsearch y map)))

; 指定した(x,y)の位置の数値を取得 map_pos（TODO: dummy）
(define (map_pos xy map) (search (cdr xy) (car xy) map))

; 指定した方向のスペースが空いているか？
(define (is_empty_pos world dir_cons)
  (if (> (map_pos (plus_cons (current_pos world) dir_cons) (car world)) 0)
    1 0))

; 方向を表す単位ベクトル
(define (direction dir)
  (cond
    ((= dir 0) (cons 0 -1))
    ((= dir 1) (cons 1 0))
    ((= dir 2) (cons 0 1))
    (else (cons -1 0))
  )
)

; 指定した方向がpillか？
(define (is_pill_pos world dir_cons)
  (if (= (map_pos (plus_cons (current_pos world) dir_cons) (car world)) 2)
    1 0))

; 右折方向
(define (turn_right dir)
  (if (> (+ dir 1) 3) 0 (+ dir 1)))

; 左折方向
(define (turn_left dir)
  (if (< (- dir 1) 0) 3 (- dir 1)))

; 反対方向
(define (turn_opposite dir)
  (if (> (+ dir 2) 3) (- dir 2) (+ dir 2)))

; 進む方向の探索関数
; 進んでよいか判定する関数と現在方向を受け取る
; 探索優先順位は、1.進む方向 2.90度曲がる方向 3.引き返す方向
(define (search_round func world state dir default)
  (cond
    ( ; 同じ方向に行けるか
      (func world (direction dir))
      (cons state dir)
    )
    ( ; 右折可能か？
      (func world (direction (turn_right dir)))
      (cons state (turn_right dir))
    )
    ( ; 左折可能か？
      (func world (direction (turn_left dir)))
      (cons state (turn_left dir))
    )
    ( ; 引き返せるか？
      (func world (direction (turn_opposite dir)))
      (cons state (turn_opposite dir))
    )
    (else default)
  )
)

; step関数
(define (step state world)
  ; 同じ方向にpillがあればそのまま
  (if (is_pill_pos world (direction (current_dir world)))
    (cons state (current_dir world))
    ; pillのない方向に進もうとしている場合、周囲を確認
    (search_round is_pill_pos world state (current_dir world)
      ; 周囲にpillがない場合は同じ方向を優先として壁以外に進む
      (if (is_empty_pos world (direction (current_dir world)))
        (cons state (current_dir world))
        (search_round is_empty_pos world state (current_dir world) 0))))
)

; main
(cons 0 step)
