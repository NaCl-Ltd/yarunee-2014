; vim: set ft=scheme:

(define curr_world -1) ; mainで値を入れる
(define world_h -1)
(define world_w -1)

; --- 経路探索
(define (cell_id pos) (+ (car pos) (* (cdr pos) world_w)))
(define (id_to_xy id) (cons (mod id world_w) (/ id world_w)))

(define WALL 0)
(define EMPTY 1)
(define PILL 2)
(define POWERPILL 3)

; 地図を表す赤黒木を作る
; proc :: (lambda (obj) ...)
;   各位置の初期値を計算するのに使われる。引数はWALL, EMPTY等
(define (make_maptree world proc)
  (maptree_insert_rows proc rbtree-empty (tuple4_0 world) 0))

  (define (maptree_insert_row proc tree y row x)
    (if (null? row)
      tree
      (maptree_insert_row proc
        (rbtree-insert (cell_id (cons x y)) (proc (car row)) tree)
        y (cdr row) (+ x 1))))

  (define (maptree_insert_rows proc tree rows y)
    (if (null? rows)
      tree
      (maptree_insert_rows proc
        (maptree_insert_row proc tree y (car rows) 0)
        (cdr rows) (+ y 1))))

; treeに以下のデータが入っているとする
;  99999: 壁
;  0〜: 探索済み
;  -1: 未探索
(define (maptree_dp tree)
  (let1 q (maptree_init_q tree) 
    (maptree_dp_1 (cons q tree))))

  (define (maptree_dp_1 qt) ;=> (cons q tree)
    (let ((q (car qt)) (tree (cdr qt)))
      (if (null? q)
        tree
        (maptree_dp_1 
          (let ((pos (car q)) (newq (cdr q)))
            (fold (lambda (qt dir)
                   (let1 npos (plus_cons pos (direction dir))
                     (let1 nobj (map_pos npos (car curr_world))
                       (if (and (= nobj EMPTY) ; 未探索の空白だったら
                                (= -1 (rbtree-lookup (cell_id npos) tree)))
                         (cons
                           (cons npos (car qt))
                           (rbtree-insert (cell_id npos) 
                                          (+ 1 (rbtree-lookup (cell_id pos) tree))
                                          (cdr qt)))
                         qt))))
              (cons newq tree)
              (upto 0 3)))))))

  ; 探索開始点を列挙し、キューの初期値とする
  (define (maptree_init_q tree)
    (compact
      (map (lambda (id)
             (let1 st (rbtree-lookup id tree)
               (cond ((= st 99999) 0)
                     ((= st -1) 0)
                     (else (id_to_xy id)))))
        (upto 0 (- (* world_w world_h) 1)))))

  ; 経路探索のためのmaptreeを作る
  (define (maptree_for_dp world)
    (make_maptree world
                  (lambda (obj)
                    (cond ((= obj PILL) 0)
                          ((= obj POWERPILL) 0)
                          ((= obj WALL) 99999)  
                          (else -1)))))

  ; デバッグ用
  (define (maptree_to_list tree)
    (map (lambda (id) (rbtree-lookup id tree))
      (upto 0 (- (* world_w world_h) 1))))


; --- worldから情報を取得する

; 現在のpower pillモードの残りを返す
(define (current_vit world) (car (car (cdr world))))

; 現在位置を取得
(define (current_pos world) (car (cdr (car (cdr world)))))

; 現在方向を取得
(define (current_dir world) (car (cdr (cdr (car (cdr world))))))

; ゴーストの現在地((x,y)のペア)のリストを返す
(define (ghost_locations world)
  (map (lambda (x) (list-ref x 1)) (list-ref world 2))
)

; ---

; cons+cons=cons
(define (plus_cons c1 c2)
  (cons (+ (car c1) (car c2)) (+ (cdr c1) (cdr c2))))

; マップ上の指定されたマスの情報を取得するサンプル
(define (lsearch self y li) (if (= y 0) (car li) (self self (- y 1) (cdr li))))
(define (search y x map) (lsearch lsearch x (lsearch lsearch y map)))

; 指定した(x,y)の位置の数値を取得 map_pos（TODO: dummy）
(define (map_pos xy map) (search (cdr xy) (car xy) map))

; 指定した方向のスペースが空いているか？
(define (is_empty_pos world dir_cons)
  (if (> (map_pos (plus_cons (current_pos world) dir_cons) (car world)) 0)
    1 0))

; 方向を表す単位ベクトル
(define (direction dir)
  (cond
    ((= dir 0) (cons 0 -1))
    ((= dir 1) (cons 1 0))
    ((= dir 2) (cons 0 1))
    (else (cons -1 0))
  )
)

; 指定した方向がpillか？
(define (is_pill_pos world dir_cons)
  (if (= (map_pos (plus_cons (current_pos world) dir_cons) (car world)) 2)
    1 0))

; 2つの座標が同じかどうか
(define (is_equal_pos pos1 pos2)
  (if (= (car pos1) (car pos2))
    (if (= (cdr pos1) (cdr pos2))
      1 0)
  0)
)

; 指定した方向が安全か(ゴーストがいないか)
(define (is_safe_pos world dir_cons ghosts)
  (not
    (fold or false
      (map (lambda (x) (is_equal_pos x (plus_cons (current_pos world) dir_cons))) ghosts)
    )
  )
)
; 危険な位置(ゴーストが来ようとしている位置)の一覧を返す
; NOTE: 手抜きなので位置の二次元リストを返しています
(define (danger_zone world)
  (let1 ghosts (car (cdr (cdr world)))
    (map (lambda (ghost)
           (let ((pos (car (cdr ghost)))
                 (dir (cdr (cdr ghost)))
                 (mode (car ghost)))
             (if (= mode 0)
               (list pos                                 ; ゴーストがいるマス
                     (plus_cons pos (direction dir)))    ; ゴーストが次に移動するマス
               (list (cons -1 -1)))))
      ghosts)))
; 指定位置にゴーストが来ようとしているか
(define (ghost_coming? danger_poss pos)
  (any? (lambda (row)
          (any? (lambda (pos_) (is_equal_pos pos_ pos))
                row))
        danger_poss))

; フルーツが出ているか
(define (fruits_appering? world)
  (> (cdr (cdr (cdr world))) 0))

; 現在位置から指定した方向にghostが見えるか？
(define (see_ghost? world dir_cons danger_poss)
  (see_ghost_from? (plus_cons (current_pos world) dir_cons) world dir_cons danger_poss 5))
; ある位置から指定した方向にghostが見えるか？
(define (see_ghost_from? pos world dir_cons danger_poss dist)
  (cond ((= dist 0) false) ; 一定距離内に見えなかった
        ((= (map_pos pos (car world)) 0) false) ; 壁まで見た
        ((ghost_coming? danger_poss pos) true)
        (else (see_ghost_from? (plus_cons pos dir_cons) world dir_cons danger_poss (- dist 1)))))

; 現在位置から指定した方向にpillが見えるか？
(define (see_pill? world dir_cons)
  (see_pill_from? (plus_cons (current_pos world) dir_cons) world dir_cons))
; ある位置から指定した方向にpillが見えるか？
(define (see_pill_from? pos world dir_cons)
  (let1 obj (map_pos pos (car world)) 
    (cond ((= obj 0) false)
          ((= obj 2) true)
          ((= obj 3) true)
          ((= obj 4) (fruits_appering? world))  ; フルーツが見えた時もとりあえずtrueにしている
          (else (see_pill_from? (plus_cons pos dir_cons) world dir_cons)))))

; 右折方向
(define (turn_right dir)
  (if (> (+ dir 1) 3) 0 (+ dir 1)))

; 左折方向
(define (turn_left dir)
  (if (< (- dir 1) 0) 3 (- dir 1)))

; 反対方向
(define (turn_opposite dir)
  (if (> (+ dir 2) 3) (- dir 2) (+ dir 2)))

; 擬似ランダム(true/false)
; とりあえず敵の位置(pos: {0: x座標, 1: y座標})をシードにしたもの
(define (binrandom world pos)
  (= 1 (mod (if pos
              (car (car (ghost_locations world)))
              (cdr (car (ghost_locations world))))
        2)))

; 進む方向の探索関数
; 進んでよいか判定する関数と現在方向を受け取る
; 探索優先順位は、1.進む方向 2.90度曲がる方向 3.引き返す方向
(define (search_round func world state dir default)
  (let1 danger_poss (danger_zone world)
  (let1 to_go?
    (lambda (dir)
      (and
        ;(not (see_ghost? world (direction dir)))
        (not (see_ghost? world (direction dir) danger_poss))
        (func world (direction dir))))
              
  (cond
    ( ; 後ろ以外の2方向へ行けるか
      (>
        (fold + 0
          (list
            (if (to_go? dir) 1 0)
            (if (to_go? (turn_right dir)) 1 0)
            (if (to_go? (turn_left dir)) 1 0)))
        1
      )
      ; 探索
      (let1 tree (maptree_dp (maptree_for_dp world))
        (let1 dps
          (map (lambda (d)
                 (let1 npos (plus_cons (current_pos world) (direction d))
                   (cons 
                     d
                     (rbtree-lookup (cell_id npos) tree))))
            (list dir (turn_right dir) (turn_left dir)))
          (let ((d0 (car (list_0 dps)))
                (d1 (car (list_1 dps)))
                (d2 (car (list_2 dps)))
                (p0 (cdr (list_0 dps)))
                (p1 (cdr (list_1 dps)))
                (p2 (cdr (list_2 dps))))
            (if (> p0 p1)
              (if (> p0 p2) p0 p2)
              (if (> p1 p2) p1 p2)))))


      ;(if (binrandom world 0) ; 擬似ランダムな分岐
      ;  (cond
      ;    ( ; 同じ方向に行けるか
      ;      (to_go? dir)
      ;      (cons state dir)
      ;    )
      ;    ( ; 右折可能か？
      ;      (to_go? (turn_right dir))
      ;      (cons state (turn_right dir))
      ;    )
      ;    ( ; 左折可能か？
      ;      (to_go? (turn_left dir))
      ;      (cons state (turn_left dir))
      ;    )
      ;    ( else default )
      ;  )
      ;  (if (binrandom world 1)
      ;    (cond
      ;      ( ; 右折可能か？
      ;        (to_go? (turn_right dir))
      ;        (cons state (turn_right dir))
      ;      )
      ;      ( ; 左折可能か？
      ;        (to_go? (turn_left dir))
      ;        (cons state (turn_left dir))
      ;      )
      ;      ( ; 同じ方向に行けるか
      ;        (to_go? dir)
      ;        (cons state dir)
      ;      )
      ;    )
      ;    (cond
      ;      ( ; 左折可能か？
      ;        (to_go? (turn_left dir))
      ;        (cons state (turn_left dir))
      ;      )
      ;      ( ; 右折可能か？
      ;        (to_go? (turn_right dir))
      ;        (cons state (turn_right dir))
      ;      )
      ;      ( ; 同じ方向に行けるか
      ;        (to_go? dir)
      ;        (cons state dir)
      ;      )
      ;    )
      ;  )
      ;)
    )
    ( ; 同じ方向に行けるか
      (to_go? dir)
      (cons state dir)
    )
    ( ; 右折可能か？
      (to_go? (turn_right dir))
      (cons state (turn_right dir))
    )
    ( ; 左折可能か？
      (to_go? (turn_left dir))
      (cons state (turn_left dir))
    )
    ( ; 引き返せるか？
      (to_go? (turn_opposite dir))
      (cons state (turn_opposite dir))
    )
    (else default)))))

; step関数
(define (step state world)
  (begin
    (set! curr_world world)
    (set! world_h (length (tuple4_0 world)))
    (set! world_w (length (car (tuple4_0 world))))

    ; pillを優先的に探索
    (search_round see_pill? world state (current_dir world)
      ; pillが周囲になければ壁のない方向へ
      (search_round is_empty_pos world state (current_dir world)
        ; デフォルトは前進
        (cons 0 (current_dir world))))))

; main
(cons 0 step)

; デバッグ用
; 上の(cons 0 step)をコメントアウトし、こちらを有効化してlman.htmlに突っ込む
; (let ((dummy_map (list (list 0 0 0 0 0 0)
;                        (list 0 1 0 1 0 0)
;                        (list 0 1 2 1 1 0)
;                        (list 0 0 1 0 0 0)
;                        (list 0 0 3 1 1 0)
;                        (list 0 0 0 0 0 0)))
;       (dummy_man (cons 0            ; vitality
;                  (cons (cons 2 2)   ; pos
;                  (cons 0            ; dir
;                  (cons 3            ; lives
;                        0)))))       ; score
;       (dummy_ghosts (list (cons 0          ; mode
;                           (cons (cons 0 1) ; pos
;                                 0))        ; dir
;                           (cons 0
;                           (cons (cons 1 1)
;                                 0))
;                           (cons 0
;                           (cons (cons 1 1)
;                                 0))
;                           (cons 0
;                           (cons (cons 1 1)
;                                 0))))
;       (dummy_fruit 0))
;   (let1 dummy_world (cons dummy_map
;                     (cons dummy_man
;                     (cons dummy_ghosts
;                           dummy_fruit)))
;     ;(step 0 dummy_world)))
;     (begin
;       (step 0 dummy_world)
;       (let1 tree (maptree_for_dp dummy_world)
;         (begin
;           (debug (maptree_to_list (maptree_dp tree))))))
;))
