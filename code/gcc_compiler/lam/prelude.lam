(define nil 0)
(define true 1)
(define false 0)

; (fold + 0 (list 1 2 3))みたいにクロージャとして使いたい時のために
; 組込命令を関数としても定義しておく。
(define (+ x y) (+ x y))
(define (- x y) (- x y))
(define (* x y) (* x y))
(define (/ x y) (/ x y))
(define (= x y) (= x y))
(define (> x y) (> x y))
(define (>= x y) (>= x y))
(define (< x y) (< x y))
(define (<= x y) (<= x y))
(define (cons x y) (cons x y))
(define (car x) (car x))
(define (cdr x) (cdr x))
(define (or x y) (or x y))
(define (and x y) (and x y))

(define (not x)
  (if x false true))

(define (null? x)
  (and (int? x) (= x 0)))

; 左からの畳込み
(define (fold kons knil clist)
  (if (null? clist)
    knil
    (fold kons (kons knil (car clist)) (cdr clist))))

; 右からの畳込み
(define (fold-right kons knil clist)
  (if (null? clist)
    knil
    (kons (car clist) (fold-right kons knil (cdr clist)))))

; 写像
; (map (lambda (x) (* x x)) (list 1 2 3))
; => (1, 4, 9)
(define (map proc clist)
  (fold-right (lambda (x l) (cons (proc x) l)) nil clist))

; リスト内にpredが真になる要素があるとき真を返す
(define (any? pred ls)
  (fold (lambda (b item) (or b (pred item))) false ls))

; リスト内の全ての要素に対してpredが真になるとき真を返す
(define (all? pred ls)
  (fold (lambda (b item) (and b (pred item))) true ls))

; リスト内にpredが真になる要素がないとき真を返す
(define (none? pred ls)
  (fold (lambda (b item) (and b (not (pred item)))) true ls))

; n番目(0始まり)の要素
; (list-ref (list 5 6 7 8 9) 2) => 7
(define (list-ref clist n)
  (if (or (null? clist) (< n 0))
    nil
    (if (= n 0)
      (car clist)
      (list-ref (cdr clist) (- n 1)))))

; リストの長さを返す
(define (length ls)
  (if (null? ls)
    0
    (+ 1 (length (cdr ls)))))

; aからbまでのリストを返す
; (upto 0 3) ;=> (list 0 1 2 3)
(define (upto a b)
  (if (> a b)
    nil
    (cons a (upto (+ a 1) b))))

; --- 赤黒木
(define rbtree-red 0)
(define rbtree-black 1)

(define rbtree-empty 0) ; nil

(define (rbtree-empty? node)
  (null? node))

(define (rbtree-has-color? node color)
  (and (not (rbtree-empty? node))
       (= (rbtree-color node) color)))
       ;(= (rbtree-color node))))

(define (rbtree-red? node)
  (rbtree-has-color? node rbtree-red))

(define (rbtree-black? node)
  (rbtree-has-color? node rbtree-black))

(define (rbtree-make-node color left right key value)
  (list color left right key value))

(define (rbtree-color node)
  (list-ref node 0))

(define (rbtree-left node)
  (list-ref node 1))

(define (rbtree-right node)
  (list-ref node 2))

(define (rbtree-key node)
  (list-ref node 3))

(define (rbtree-value node)
  (list-ref node 4))

(define (rbtree-lookup key node)
  (cond
    ((rbtree-empty? node) nil)
    ((< key (rbtree-key node))
     (rbtree-lookup key (rbtree-left node)))
    ((> key (rbtree-key node))
     (rbtree-lookup key (rbtree-right node)))
    (else (rbtree-value node))))

(define (rbtree-make-black node)
  (rbtree-make-node
    rbtree-black
    (rbtree-left node)
    (rbtree-right node)
    (rbtree-key node)
    (rbtree-value node)))

(define (rbtree-insert key val node)
  (rbtree-make-black (rbtree-ins key val node)))

(define (rbtree-ins key val node)
  (cond
    ((rbtree-empty? node)
     (rbtree-make-node rbtree-red rbtree-empty rbtree-empty key val))
    ((< key (rbtree-key node))
     (rbtree-balance (rbtree-color node)
             (rbtree-ins key val (rbtree-left node))
             (rbtree-right node)
             (rbtree-key node)
             (rbtree-value node)))
    ((> key (rbtree-key node))
     (rbtree-balance (rbtree-color node)
              (rbtree-left node)
              (rbtree-ins key val (rbtree-right node))
              (rbtree-key node)
              (rbtree-value node)))
    (else
      (rbtree-make-node
    (rbtree-color node) (rbtree-left node) (rbtree-right node)
    key val))))

(define (rbtree-balance color left right key val)
  (cond
    ((and (= color rbtree-black)
      (and (rbtree-red? left) (rbtree-red? (rbtree-left left))))
     (rbtree-make-node
       rbtree-red
       (rbtree-make-node
     rbtree-black
     (rbtree-left (rbtree-left left))
     (rbtree-right (rbtree-left left))
     (rbtree-key (rbtree-left left))
     (rbtree-value (rbtree-left left)))
     (rbtree-make-node
       rbtree-black
       (rbtree-right left)
       right
       key
       val)
     (rbtree-key left)
     (rbtree-value left)))
    ((and (= color rbtree-black)
      (and (rbtree-red? left) (rbtree-red? (rbtree-right left))))
     (rbtree-make-node
       rbtree-red
       (rbtree-make-node
     rbtree-black
     (rbtree-left left)
     (rbtree-left (rbtree-right left))
     (rbtree-key left)
     (rbtree-value left))
       (rbtree-make-node
     rbtree-black
     (rbtree-right (rbtree-right left))
     right
     key
     val)
       (rbtree-key (rbtree-right left))
       (rbtree-value (rbtree-right left))))
    ((and (= color rbtree-black)
      (and (rbtree-red? right) (rbtree-red? (rbtree-left right))))
     (rbtree-make-node
       rbtree-red
       (rbtree-make-node
     rbtree-black
     left
     (rbtree-left (rbtree-left right))
     key
     val)
       (rbtree-make-node
     rbtree-black
     (rbtree-right (rbtree-left right))
     (rbtree-right right)
     (rbtree-key right)
     (rbtree-value right))
       (rbtree-key (rbtree-left right))
       (rbtree-value (rbtree-left right))))
    ((and (= color rbtree-black)
      (and (rbtree-red? right) (rbtree-red? (rbtree-right right))))
     (rbtree-make-node
       rbtree-red
       (rbtree-make-node
     rbtree-black
     left
     (rbtree-left right)
     key
     val)
       (rbtree-make-node
     rbtree-black
     (rbtree-left (rbtree-right right))
     (rbtree-right (rbtree-right right))
     (rbtree-key (rbtree-right right))
     (rbtree-value (rbtree-right right)))
       (rbtree-key (rbtree-left right))
       (rbtree-value (rbtree-left right))))
    (else
      (rbtree-make-node color left right key val))))

;(let
;  ((tree (rbtree-insert 0 8 (rbtree-insert 1 6 (rbtree-insert 2 9 rbtree-empty)))))
;  (list (rbtree-lookup 0 tree)
;    (rbtree-lookup 1 tree)
;    (rbtree-lookup 2 tree)))

; vim: set filetype=lisp :
