; 最初の数ターンは気まぐれAI
jeq (fickleend),[254],1
jgt (fickle),[254],0
mov [254],20
fickle:
mov a,255      ; A is the min value.
mov b,0        ; B is the corresponding direction.
mov c,255      ; C is the candidate direction for the new min.
fickleloop:
inc c          ; Pick new direction.
jgt (fickleloopend),[c],a    ; Jump if count of direction C is above best so far.
; We have a new min.
mov a,[c]      ; Save new min.
mov b,c        ; Save direction.
jlt (fickleloop),c,3      ; Jump target. Loop back if we have not tried all 4 directions.
fickleloopend:
mov a,b        ; Actually set desired direction.
int 0
int 3          ; Get our ghost index in A.
int 6          ; Get out current direction in B.
inc [b]        ; Increment corresponding count.
dec [254]
mov a,0
mov b,0
hlt            ; Stop.
fickleend:


; レジスタのクリア
mov a,0
mov b,0
mov c,0
mov d,0
mov e,0
mov f,0

; 目的地についていたら時間を潰す
jgt (nop),[10],0

int 3
mov [0],a ; ghostのindex
int 5
mov [1],a ; ghostのX座標
mov [2],b ; ghostのY座標
mov a,[0]
int 6
mov [3],b ; ghostの向き
int 1
mov [4],a ; lambda-manのX座標
mov [5],b ; lambda-manのY座標
; [6] : 前回のlambda-manのx座標
; [7] ; y座標
; [8] ; 目的となるポジション: x
; [9] ; 目的となるポジション: y
; [10]; とどまっておくtick数

lookpos:
mov c,[4]
mov d,[5]
sub c,[6]  ; lambdamanの前回からの差分を検知(x)
sub d,[7]  ; 同上(y)
mov [8],[4]
mov [9],[5]
mov a,4
forlookpos:
dec a
add [8],c
add [9],d
jeq (forlookpos),a,0
mov a,[8]
mov b,[9]

horizontalcheck:
mov a,[1] ; ghost x
mov b,[8] ; lambda look x
jgt (leftcheck),a,b
jlt (rightcheck),a,b
jeq (verticalcheck),0,0

leftcheck:
mov c,1   ; leftcheck done
dec a
int 7     ; map state
jeq (verticalcheck),a,0  ; 0 = wall
mov a,3   ; 3 = left
jeq (emit),0,0

rightcheck:
mov d,1   ; rightcheck done
inc a
int 7     ; map state
jeq (verticalcheck),a,0  ; 0 = wall
mov a,1   ; 1 = right
jeq (emit),0,0

verticalcheck:
mov a,[2] ; ghost y
mov b,[9] ; lambda look y
jgt (upcheck),a,b
jlt (downcheck),a,b
jeq (hold),0,0

upcheck:
mov e,1   ; upcheck done
dec a
int 7     ; map state
jeq (upfallback),a,0  ; 0 = wall
mov a,0   ; 0 = up
jeq (emit),0,0

upfallback:
jeq (leftcheck),c,0
jeq (rightcheck),d,0
jeq (downcheck),f,0

downcheck:
mov f,1   ; downcheck done
inc a
int 7     ; map state
jeq (downfallback),a,0  ; 0 = wall
mov a,2   ; 2 = down
jeq (emit),0,0

downfallback:
jeq (rightcheck),d,0
jeq (leftcheck),c,0
jeq (upcheck),e,0

hold:
mov [10], 10 ; 消費するtick数を設定
jmp (nop)

; その場でウロウロ
nop:
int 3
int 5
and a,1
mov b,a
mov a,2
jeq 7,b,1
mov a,0
dec [10]  ; 消費するtick数
jmp (emit)

emit:
int 0
jmp (end)

end:
int 1
mov [6],a ; 今回のlambda-manのX座標
mov [7],b ; 今回のlambda-manのY座標
hlt